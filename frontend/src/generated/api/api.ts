/* tslint:disable */
/* eslint-disable */
/**
 * LoLchievement API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface AchievementDTO
 */
export interface AchievementDTO {
    /**
     * 
     * @type {number}
     * @memberof AchievementDTO
     */
    'challengeId': number;
    /**
     * 
     * @type {string}
     * @memberof AchievementDTO
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof AchievementDTO
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof AchievementDTO
     */
    'shortDescription'?: string;
    /**
     * 
     * @type {State}
     * @memberof AchievementDTO
     */
    'state'?: State;
    /**
     * 
     * @type {Array<AchievementThresholdDTO>}
     * @memberof AchievementDTO
     */
    'achievementThreshHolds'?: Array<AchievementThresholdDTO>;
}


/**
 * 
 * @export
 * @interface AchievementThresholdDTO
 */
export interface AchievementThresholdDTO {
    /**
     * 
     * @type {string}
     * @memberof AchievementThresholdDTO
     */
    'title': string;
    /**
     * 
     * @type {number}
     * @memberof AchievementThresholdDTO
     */
    'value': number;
}
/**
 * 
 * @export
 * @interface PlayerAchievementDTO
 */
export interface PlayerAchievementDTO {
    /**
     * 
     * @type {number}
     * @memberof PlayerAchievementDTO
     */
    'challengeId': number;
    /**
     * 
     * @type {Tier}
     * @memberof PlayerAchievementDTO
     */
    'level': Tier;
    /**
     * 
     * @type {number}
     * @memberof PlayerAchievementDTO
     */
    'value': number;
    /**
     * 
     * @type {number}
     * @memberof PlayerAchievementDTO
     */
    'percentile'?: number;
    /**
     * 
     * @type {number}
     * @memberof PlayerAchievementDTO
     */
    'achievedTime'?: number;
    /**
     * 
     * @type {State}
     * @memberof PlayerAchievementDTO
     */
    'state'?: State;
    /**
     * 
     * @type {Array<AchievementThresholdDTO>}
     * @memberof PlayerAchievementDTO
     */
    'achievementThreshHolds'?: Array<AchievementThresholdDTO>;
}


/**
 * 
 * @export
 * @interface PlayerDTO
 */
export interface PlayerDTO {
    /**
     * 
     * @type {string}
     * @memberof PlayerDTO
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof PlayerDTO
     */
    'gameName': string;
    /**
     * 
     * @type {string}
     * @memberof PlayerDTO
     */
    'tagName': string;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const State = {
    Disabled: 'DISABLED',
    Hidden: 'HIDDEN',
    Enabled: 'ENABLED',
    Archived: 'ARCHIVED'
} as const;

export type State = typeof State[keyof typeof State];


/**
 * 
 * @export
 * @enum {string}
 */

export const Tier = {
    Iron: 'IRON',
    Bronze: 'BRONZE',
    Silver: 'SILVER',
    Gold: 'GOLD',
    Platinum: 'PLATINUM',
    Emerald: 'EMERALD',
    Diamond: 'DIAMOND',
    Master: 'MASTER',
    Grandmaster: 'GRANDMASTER',
    Challenger: 'CHALLENGER'
} as const;

export type Tier = typeof Tier[keyof typeof Tier];



/**
 * AchievementApi - axios parameter creator
 * @export
 */
export const AchievementApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get achievement detail by challenge id
         * @param {string} challengeId Player uuid
         * @param {string} language local language
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAchievementDetailByChallengeId: async (challengeId: string, language: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'challengeId' is not null or undefined
            assertParamExists('getAchievementDetailByChallengeId', 'challengeId', challengeId)
            // verify required parameter 'language' is not null or undefined
            assertParamExists('getAchievementDetailByChallengeId', 'language', language)
            const localVarPath = `/api/achievements/{challengeId}/{language}`
                .replace(`{${"challengeId"}}`, encodeURIComponent(String(challengeId)))
                .replace(`{${"language"}}`, encodeURIComponent(String(language)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get challenge token image by challenge id and tier
         * @param {number} challengeId Challenge ID
         * @param {Tier} [tier] Optional tier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChallengeToken: async (challengeId: number, tier?: Tier, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'challengeId' is not null or undefined
            assertParamExists('getChallengeToken', 'challengeId', challengeId)
            const localVarPath = `/api/achievements/token/{challengeId}`
                .replace(`{${"challengeId"}}`, encodeURIComponent(String(challengeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (tier !== undefined) {
                localVarQueryParameter['tier'] = tier;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all player achievements by pUUID
         * @param {string} pUUID Player uuid
         * @param {string} language local language
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPlayerAchievementByPUUID: async (pUUID: string, language: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pUUID' is not null or undefined
            assertParamExists('getPlayerAchievementByPUUID', 'pUUID', pUUID)
            // verify required parameter 'language' is not null or undefined
            assertParamExists('getPlayerAchievementByPUUID', 'language', language)
            const localVarPath = `/api/achievements/player/{pUUID}/{language}`
                .replace(`{${"pUUID"}}`, encodeURIComponent(String(pUUID)))
                .replace(`{${"language"}}`, encodeURIComponent(String(language)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AchievementApi - functional programming interface
 * @export
 */
export const AchievementApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AchievementApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get achievement detail by challenge id
         * @param {string} challengeId Player uuid
         * @param {string} language local language
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAchievementDetailByChallengeId(challengeId: string, language: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AchievementDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAchievementDetailByChallengeId(challengeId, language, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AchievementApi.getAchievementDetailByChallengeId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get challenge token image by challenge id and tier
         * @param {number} challengeId Challenge ID
         * @param {Tier} [tier] Optional tier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getChallengeToken(challengeId: number, tier?: Tier, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getChallengeToken(challengeId, tier, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AchievementApi.getChallengeToken']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get all player achievements by pUUID
         * @param {string} pUUID Player uuid
         * @param {string} language local language
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPlayerAchievementByPUUID(pUUID: string, language: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PlayerAchievementDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPlayerAchievementByPUUID(pUUID, language, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AchievementApi.getPlayerAchievementByPUUID']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AchievementApi - factory interface
 * @export
 */
export const AchievementApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AchievementApiFp(configuration)
    return {
        /**
         * 
         * @summary Get achievement detail by challenge id
         * @param {string} challengeId Player uuid
         * @param {string} language local language
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAchievementDetailByChallengeId(challengeId: string, language: string, options?: RawAxiosRequestConfig): AxiosPromise<AchievementDTO> {
            return localVarFp.getAchievementDetailByChallengeId(challengeId, language, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get challenge token image by challenge id and tier
         * @param {number} challengeId Challenge ID
         * @param {Tier} [tier] Optional tier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChallengeToken(challengeId: number, tier?: Tier, options?: RawAxiosRequestConfig): AxiosPromise<File> {
            return localVarFp.getChallengeToken(challengeId, tier, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all player achievements by pUUID
         * @param {string} pUUID Player uuid
         * @param {string} language local language
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPlayerAchievementByPUUID(pUUID: string, language: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<PlayerAchievementDTO>> {
            return localVarFp.getPlayerAchievementByPUUID(pUUID, language, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AchievementApi - object-oriented interface
 * @export
 * @class AchievementApi
 * @extends {BaseAPI}
 */
export class AchievementApi extends BaseAPI {
    /**
     * 
     * @summary Get achievement detail by challenge id
     * @param {string} challengeId Player uuid
     * @param {string} language local language
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AchievementApi
     */
    public getAchievementDetailByChallengeId(challengeId: string, language: string, options?: RawAxiosRequestConfig) {
        return AchievementApiFp(this.configuration).getAchievementDetailByChallengeId(challengeId, language, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get challenge token image by challenge id and tier
     * @param {number} challengeId Challenge ID
     * @param {Tier} [tier] Optional tier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AchievementApi
     */
    public getChallengeToken(challengeId: number, tier?: Tier, options?: RawAxiosRequestConfig) {
        return AchievementApiFp(this.configuration).getChallengeToken(challengeId, tier, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all player achievements by pUUID
     * @param {string} pUUID Player uuid
     * @param {string} language local language
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AchievementApi
     */
    public getPlayerAchievementByPUUID(pUUID: string, language: string, options?: RawAxiosRequestConfig) {
        return AchievementApiFp(this.configuration).getPlayerAchievementByPUUID(pUUID, language, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * PlayerApi - axios parameter creator
 * @export
 */
export const PlayerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get player by gameName and tagName
         * @param {string} gameName In game player name
         * @param {string} tagName Player tag name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPlayerByGameAndTagName: async (gameName: string, tagName: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'gameName' is not null or undefined
            assertParamExists('getPlayerByGameAndTagName', 'gameName', gameName)
            // verify required parameter 'tagName' is not null or undefined
            assertParamExists('getPlayerByGameAndTagName', 'tagName', tagName)
            const localVarPath = `/api/players/{gameName}/{tagName}`
                .replace(`{${"gameName"}}`, encodeURIComponent(String(gameName)))
                .replace(`{${"tagName"}}`, encodeURIComponent(String(tagName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get player by PUUID
         * @param {string} id Player uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPlayerById: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getPlayerById', 'id', id)
            const localVarPath = `/api/players/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PlayerApi - functional programming interface
 * @export
 */
export const PlayerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PlayerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get player by gameName and tagName
         * @param {string} gameName In game player name
         * @param {string} tagName Player tag name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPlayerByGameAndTagName(gameName: string, tagName: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlayerDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPlayerByGameAndTagName(gameName, tagName, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PlayerApi.getPlayerByGameAndTagName']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get player by PUUID
         * @param {string} id Player uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPlayerById(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlayerDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPlayerById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PlayerApi.getPlayerById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PlayerApi - factory interface
 * @export
 */
export const PlayerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PlayerApiFp(configuration)
    return {
        /**
         * 
         * @summary Get player by gameName and tagName
         * @param {string} gameName In game player name
         * @param {string} tagName Player tag name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPlayerByGameAndTagName(gameName: string, tagName: string, options?: RawAxiosRequestConfig): AxiosPromise<PlayerDTO> {
            return localVarFp.getPlayerByGameAndTagName(gameName, tagName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get player by PUUID
         * @param {string} id Player uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPlayerById(id: string, options?: RawAxiosRequestConfig): AxiosPromise<PlayerDTO> {
            return localVarFp.getPlayerById(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PlayerApi - object-oriented interface
 * @export
 * @class PlayerApi
 * @extends {BaseAPI}
 */
export class PlayerApi extends BaseAPI {
    /**
     * 
     * @summary Get player by gameName and tagName
     * @param {string} gameName In game player name
     * @param {string} tagName Player tag name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlayerApi
     */
    public getPlayerByGameAndTagName(gameName: string, tagName: string, options?: RawAxiosRequestConfig) {
        return PlayerApiFp(this.configuration).getPlayerByGameAndTagName(gameName, tagName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get player by PUUID
     * @param {string} id Player uuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlayerApi
     */
    public getPlayerById(id: string, options?: RawAxiosRequestConfig) {
        return PlayerApiFp(this.configuration).getPlayerById(id, options).then((request) => request(this.axios, this.basePath));
    }
}



